import random
import timeout_decorator

import socket
import signal

from _thread import *
import threading 

def rabinMiller(num):
    # Returns True if num is a prime number.

    s = num - 1
    t = 0
    while s % 2 == 0:
        # keep halving s while it is even (and use t
        # to count how many times we halve s)
        s = s // 2
        t += 1

    for trials in range(5): # try to falsify num's primality 5 times
        a = random.randrange(2, num - 1)
        v = pow(a, s, num)
        if v != 1: # this test does not apply if v is 1.
            i = 0
            while v != (num - 1):
                if i == t - 1:
                    return False
                else:
                    i = i + 1
                    v = (v ** 2) % num
    return True

# 899809369, 899817329

primes = [899812427, 899811641, 899814193, 899810501, 899815783, 899812813, 899817091, 899816947, 899815229, 899812733, 899812519, 899809843, 899813969, 899816663, 899810479, 899816809, 899816413, 899816921, 899809451, 899815097, 899815349, 899813069, 899813119, 899816339, 899812741, 899814919, 899812201, 899810411, 899809679, 899812547, 899813909, 899814541, 899816191, 899810533, 899811863, 899815993, 899813513, 899811191, 899812553, 899811131, 899815633, 899811719, 899814197, 899812591, 899815327, 899810279, 899816347, 899815237, 899809913, 899811617, 899816461, 899815837, 899810831, 899813263, 899814457, 899812723, 899817071, 899810447, 899813749, 899816849, 899814451, 899815621, 899810339, 899817329, 899815991, 899812709, 899817019, 899810671, 899817187, 899816153, 899817047, 899817041, 899813273, 899812909, 899812247, 899813441, 899810089, 899809661, 899816531, 899811919, 899816039, 899813353, 899817227, 899814053, 899811907, 899817173, 899814481, 899814323, 899810047, 899810777, 899814011, 899810581, 899809829, 899810333, 899816521, 899816011, 899810503, 899815733, 899817223, 899811833, 899814497, 899810399, 899810689, 899809793, 899810033, 899814719, 899814031, 899817311, 899812943, 899811047, 899809747, 899810909, 899811109, 899817137, 899815597, 899812033, 899810413, 899815067, 899815817, 899809571, 899813177, 899815459, 899809871, 899810567, 899815417, 899810599, 899810099, 899817197, 899812777, 899813539, 899811607, 899813053, 899816933, 899813443, 899813483, 899809553, 899815439, 899814491, 899813561, 899813531, 899809901, 899813933, 899813633, 899815157, 899812699, 899816737, 899817013, 899814313, 899815541, 899811373, 899816123, 899812597, 899815573, 899811571, 899816993, 899809369, 899817059, 899814679, 899812093, 899812483, 899813947, 899812273, 899812447, 899809373, 899810011, 899816059, 899815211, 899811433, 899813093, 899811973, 899815607, 899812951, 899817301, 899809777, 899815757, 899811533, 899812981, 899814299, 899815603, 899814343, 899811763, 899813003, 899811529, 899809633, 899813917, 899815577, 899816417, 899809457, 899811877, 899810507, 899809663, 899810773, 899812759, 899810467, 899810269, 899815409, 899811457, 899815999, 899815303, 899813279]
comps = [899813985, 899815986, 899816955, 899810785, 899811631, 899811539, 899810197, 899811468, 899815515, 899815563, 899815222, 899815115, 899812016, 899813476, 899812784, 899811474, 899814970, 899816194, 899816517, 899810192, 899815868, 899809461, 899814607, 899816159, 899814039, 899812255, 899813904, 899809650, 899812985, 899811144, 899816676, 899810719, 899816330, 899809492, 899814933, 899816906, 899814276, 899816282, 899809522, 899817153, 899813096, 899813560, 899815942, 899810858, 899815810, 899811061, 899813230, 899817256, 899814347, 899811740, 899813901, 899812239, 899811834, 899811826, 899814047, 899810316, 899813899, 899810895, 899817212, 899813516, 899810344, 899816839, 899815818, 899815640, 899812694, 899812795, 899809774, 899811346, 899816054, 899814391, 899815788, 899814480, 899814662, 899815440, 899810143, 899809532, 899810043, 899813028, 899813084, 899811263, 899814111, 899814401, 899814280, 899812645, 899809700, 899809665, 899809775, 899813863, 899810079, 899814965, 899816661, 899816097, 899812022, 899815125, 899811750, 899815434, 899814695, 899811398, 899815221, 899815371, 899813087, 899816298, 899814158, 899816003, 899812644, 899812662, 899814180, 899813451, 899816964, 899813346, 899810970, 899809537, 899813966, 899809548, 899814625, 899811287, 899816122, 899814678, 899812259, 899814073, 899813202, 899813371, 899810816, 899810633, 899813905, 899813953, 899811955, 899817031, 899814355, 899813942, 899814297, 899811654, 899811984, 899814405, 899811667, 899810761, 899817222, 899816800, 899815442, 899811290, 899809562, 899811323, 899811555, 899810169, 899810377, 899815522, 899812950, 899814704, 899816302, 899812756, 899810524, 899812628, 899815839, 899814044, 899810381, 899811714, 899814015, 899812449, 899815372, 899810571, 899813471, 899813320, 899813071, 899816389, 899810475, 899815765, 899813902, 899812574, 899814980, 899810870, 899811049, 899815636, 899815835, 899816695, 899809980, 899815528, 899813384, 899813978, 899815918, 899811041, 899816670, 899814321, 899809826, 899815276, 899811271, 899813823, 899810977, 899810262, 899816706, 899813815, 899811419, 899816959, 899811406, 899814809, 899814978, 899809831, 899813666, 899815514, 899812783, 899815908]

def is_comp(k):
    global primes
    return not(k in primes)

def gen_unprime():
    x = random.randint(899809369, 899817329)

    while not is_comp(x):
        x = random.randint(899809369, 899817329)

    return x

primes = [899812427, 899811641, 899814193, 899810501, 899815783, 899812813, 899817091, 899816947, 899815229, 899812733, 899812519, 899809843, 899813969, 899816663, 899810479, 899816809, 899816413, 899816921, 899809451, 899815097, 899815349, 899813069, 899813119, 899816339, 899812741, 899814919, 899812201, 899810411, 899809679, 899812547, 899813909, 899814541, 899816191, 899810533, 899811863, 899815993, 899813513, 899811191, 899812553, 899811131, 899815633, 899811719, 899814197, 899812591, 899815327, 899810279, 899816347, 899815237, 899809913, 899811617, 899816461, 899815837, 899810831, 899813263, 899814457, 899812723, 899817071, 899810447, 899813749, 899816849, 899814451, 899815621, 899810339, 899817329, 899815991, 899812709, 899817019, 899810671, 899817187, 899816153, 899817047, 899817041, 899813273, 899812909, 899812247, 899813441, 899810089, 899809661, 899816531, 899811919, 899816039, 899813353, 899817227, 899814053, 899811907, 899817173, 899814481, 899814323, 899810047, 899810777, 899814011, 899810581, 899809829, 899810333, 899816521, 899816011, 899810503, 899815733, 899817223, 899811833, 899814497, 899810399, 899810689, 899809793, 899810033, 899814719, 899814031, 899817311, 899812943, 899811047, 899809747, 899810909, 899811109, 899817137, 899815597, 899812033, 899810413, 899815067, 899815817, 899809571, 899813177, 899815459, 899809871, 899810567, 899815417, 899810599, 899810099, 899817197, 899812777, 899813539, 899811607, 899813053, 899816933, 899813443, 899813483, 899809553, 899815439, 899814491, 899813561, 899813531, 899809901, 899813933, 899813633, 899815157, 899812699, 899816737, 899817013, 899814313, 899815541, 899811373, 899816123, 899812597, 899815573, 899811571, 899816993, 899809369, 899817059, 899814679, 899812093, 899812483, 899813947, 899812273, 899812447, 899809373, 899810011, 899816059, 899815211, 899811433, 899813093, 899811973, 899815607, 899812951, 899817301, 899809777, 899815757, 899811533, 899812981, 899814299, 899815603, 899814343, 899811763, 899813003, 899811529, 899809633, 899813917, 899815577, 899816417, 899809457, 899811877, 899810507, 899809663, 899810773, 899812759, 899810467, 899810269, 899815409, 899811457, 899815999, 899815303, 899813279]
comps = [899813985, 899815986, 899816955, 899810785, 899811631, 899811539, 899810197, 899811468, 899815515, 899815563, 899815222, 899815115, 899812016, 899813476, 899812784, 899811474, 899814970, 899816194, 899816517, 899810192, 899815868, 899809461, 899814607, 899816159, 899814039, 899812255, 899813904, 899809650, 899812985, 899811144, 899816676, 899810719, 899816330, 899809492, 899814933, 899816906, 899814276, 899816282, 899809522, 899817153, 899813096, 899813560, 899815942, 899810858, 899815810, 899811061, 899813230, 899817256, 899814347, 899811740, 899813901, 899812239, 899811834, 899811826, 899814047, 899810316, 899813899, 899810895, 899817212, 899813516, 899810344, 899816839, 899815818, 899815640, 899812694, 899812795, 899809774, 899811346, 899816054, 899814391, 899815788, 899814480, 899814662, 899815440, 899810143, 899809532, 899810043, 899813028, 899813084, 899811263, 899814111, 899814401, 899814280, 899812645, 899809700, 899809665, 899809775, 899813863, 899810079, 899814965, 899816661, 899816097, 899812022, 899815125, 899811750, 899815434, 899814695, 899811398, 899815221, 899815371, 899813087, 899816298, 899814158, 899816003, 899812644, 899812662, 899814180, 899813451, 899816964, 899813346, 899810970, 899809537, 899813966, 899809548, 899814625, 899811287, 899816122, 899814678, 899812259, 899814073, 899813202, 899813371, 899810816, 899810633, 899813905, 899813953, 899811955, 899817031, 899814355, 899813942, 899814297, 899811654, 899811984, 899814405, 899811667, 899810761, 899817222, 899816800, 899815442, 899811290, 899809562, 899811323, 899811555, 899810169, 899810377, 899815522, 899812950, 899814704, 899816302, 899812756, 899810524, 899812628, 899815839, 899814044, 899810381, 899811714, 899814015, 899812449, 899815372, 899810571, 899813471, 899813320, 899813071, 899816389, 899810475, 899815765, 899813902, 899812574, 899814980, 899810870, 899811049, 899815636, 899815835, 899816695, 899809980, 899815528, 899813384, 899813978, 899815918, 899811041, 899816670, 899814321, 899809826, 899815276, 899811271, 899813823, 899810977, 899810262, 899816706, 899813815, 899811419, 899816959, 899811406, 899814809, 899814978, 899809831, 899813666, 899815514, 899812783, 899815908]

def guess(is_prime, c):
    ans = c.recv(256)
    if ans == 'y\n' and is_prime or ans == 'n\n' and not is_prime:
        return True
    
    return False

def threaded(c):
    global primes, comps

    score = 0

    while score < 4:
        if random.randint(0, 1) == 0:
            prime = True
        else:
            prime = False

        x = random.choice(primes) if prime else random.choice(comps)

        c.send('Can you tell me if the following number is prime or not [y/n]?\n')
        c.send(str(x) + '\n> ')

        if guess(prime, c):
            c.send('Good!\n')
            score += 1
        else:
            c.send('Incorrect!\n')
            c.close()
            return
        
    c.send('''MEITAR{M1l3r_R4b1n!}''')
    c.close() 

def game():
    pass

s = socket.socket()
s.bind(('', 1244))
s.listen(10)

def warp1():
    def work():
        t = threading.Thread(target=threaded, args=(c, ))
        t.start()
        t.join(timeout=10)

    work()

try:

    while True:
        c, addr = s.accept()

        print('connection {}'.format(addr))

        t = threading.Thread(target=threaded, args=(c, ))
        print 'a'
        t.start()
        t.join(timeout=40)
        c.send('Bye')
        c.close()
        print 'b'

except KeyboardInterrupt:
    s.close()
