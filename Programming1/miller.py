import random
import timeout_decorator

import socket
import signal

from _thread import *
import threading 

def rabinMiller(num):
    # Returns True if num is a prime number.

    s = num - 1
    t = 0
    while s % 2 == 0:
        # keep halving s while it is even (and use t
        # to count how many times we halve s)
        s = s // 2
        t += 1

    for trials in range(5): # try to falsify num's primality 5 times
        a = random.randrange(2, num - 1)
        v = pow(a, s, num)
        if v != 1: # this test does not apply if v is 1.
            i = 0
            while v != (num - 1):
                if i == t - 1:
                    return False
                else:
                    i = i + 1
                    v = (v ** 2) % num
    return True

def is_comp(k):
    global primes
    return not(k in primes)

def gen_unprime():
    x = random.randint(899809369, 899817329)

    while not is_comp(x):
        x = random.randint(899809369, 899817329)

    return x

primes = list(map(long, '''92084128947758882360519652290521788391132535660173
15238252138718278236747869370882442649201519501969
84790078332572843576647496947199284532102041137401
95024867630231557291106951654457088875163477409663
98332878020515840714714073149223728766318245680079
84300896048655128801332120795262256512214873416681
4812207298961367656963393910055430842196894217491
3284848687765412507254224164579989618707406820683
98789791646916420354861876788843844042368695967227
20198058085136139330428560702165858373421360767659
52341912889938515966076244029229050024020440767493
58119179016661702753316693929742641734069226712791
59267274649904597230388439727404874687103558733683
20849591951675345960777606248169946077014233885209
57724427009138238281698484258929792116885014287721
37143892276685515532046466777976877868554484861679
74366559816457513680174070660855022709740030746651
15188307878208194411044381447679606293459763269537
31403349024856481650396166413043583926937406570753
86055903840219289647262520815226696130811770011893
1094924557440469705288052328165745503739926681743
90193724290479477467919586435036488490194845383009
56201361374958282661505915171210784693161910659663
32696347195672879062278279963798507898126731954641
71162758491702567087814652109843955569361468049617
23051300133024844505426272323924325733866288237387
44102885353923134427097589810123102629098402445427
70529656730427099303967491471929197805645173751113
90271345001842842049863556483817046551060035180513
36194323227870148315922213942315407023424241038187
54896127500603207903691185516606012288065342164739
63821722517986402214134769260333282946364799966373
84514828994502368297668207128207841975663625527963
87950232961397949481564866264340357294352193806153
25418130234613416296083193379684396573288339434681
58630585128405171635553099388944760362509105068369
327838658504887772931723812118069485185419578593
83284784538958970191221128039893763522638022365561
24493756577146345080830620751370188163586258671427
71216724277597248899945295831164338037267256810797'''.split()))

comps = list(map(long, '''10097358661595939703507626999993882843266070164424
81197905151207044884827431191225425686181653694867
82178304814774855513850618773839045625213324873089
5444640823607186771702124573070149560729064188412
76682358159902649031004092490609732002098555214877
17158467619181993844020953884367703365364716824612
19909975475588036651537997774382855573623069242024
42812014105320403092498449904949719364941039294608
74126111926278260383767489978021862643859658708838
31597470824112474726747074433517785823908344329412
26385127265143076496479452747081274431447753296846
8028741543788444255458974196422343945898548690550
31850600071492534675095372953084943678578292797861
78899917691602732331739717704742617546176653554130
22463918298588415251089960941297942203847864204508
97885524466346353141895272220919713239660636254833
56910331826705322735356740956777289787594188003117
89003544216907446662649795551794177182716312330481
21366281276955535668548793152667801961399880907875
87957887450312470731616510967030527079296024509978
53888451812354263179757132931453141251192226489321
79304454506012073378355748471359921371532010869478
30839070553273265946362536975823192538717566962603
39822951610011746042257184791996525464774148251799
72242016994785034055549445191996870843742331605285
25624678424998366322729613342964621977258557754000
24811363057887047328222228181895880290625280325844
19646107070031437751489461983967852557741850203643
32578383459862927645660738707664644862429317192430
51613905212008807422876751558549056574086717175586
31690724694141681442008325704951955463022728572624
98630718515516563886013360784333488758301998826934
96781508648748043620545787717286269345023216898431
61215168994273109187741182708647832756751928701079
59090241405887018775851302019187324600903845548067
63552806191243700364432116837524236565604248845647
69433993724320885038189870722665510069651267708475
41580233044861181755147762107472726026715516957853
86140894043215038000798086009829044497337012462621
218043190757203220043581550443063591044250229485'''.split()))

def guess(is_prime, c):
    ans = c.recv(256)
    if ans == 'y\n' and is_prime or ans == 'n\n' and not is_prime:
        return True
    
    return False

def threaded(c):
    global primes, comps

    score = 0

    while score < 5:
        if random.randint(0, 1) == 0:
            prime = True
        else:
            prime = False

        x = random.choice(primes) if prime else random.choice(comps)

        c.send('Can you tell me if the following number is prime or not [y/n]?\n')
        c.send(str(x) + '\n> ')

        if guess(prime, c):
            c.send('Good!\n')
            score += 1
        else:
            c.send('Incorrect!\n')
            c.close()
            return
        
    c.send('''MEITAR{M1l3r_R4b1n!}''')
    c.close() 

def game():
    pass

s = socket.socket()
s.bind(('', 1244))
s.listen(10)

def warp1():
    def work():
        t = threading.Thread(target=threaded, args=(c, ))
        t.start()
        t.join(timeout=10)

    work()

try:
    while True:
        c, addr = s.accept()

        print('connection {}'.format(addr))

        t = threading.Thread(target=threaded, args=(c, ))
        print 'a'
        t.start()
        t.join(timeout=40)
        try:
            c.send('Bye')
            c.close()
            print 'b'
        except:
            pass
        finally:
            try:
                c.close()
            except:
                pass

except KeyboardInterrupt:
    s.close()
